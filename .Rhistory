shiny::runApp()
runApp('tut1')
source("C:/Users/NSayresm/OneDrive - Environmental Protection Agency (EPA)/ESG/Shiny/tut1/app.R", echo=TRUE)
runApp('tut1')
runApp('Exercise')
?renderPlot
runApp('Exercise')
runApp('Exercise')
runApp('Exercise')
?sliderInput
runApp('Exercise')
?selectInput
runApp('Exercise')
runApp('Exercise')
?plotOutput
runApp('Exercise')
source("C:/Users/NSayresm/OneDrive - Environmental Protection Agency (EPA)/ESG/Shiny/Exercise/app.R", echo=TRUE)
server = function(input, output, session) {
data <- reactive({
input$newplot
# Add a little noise to the cars data so the points move
cars + rnorm(nrow(cars))
})
output$plot <- renderPlot({
d <- data()
plot(d$speed, d$dist)
})
output$plot_clickinfo <- renderPrint({
cat("Click:\n")
str(input$plot_click)
})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$plot_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$plot_brush)
})
output$plot_clickedpoints <- renderTable({
# For base graphics, we need to specify columns, though for ggplot2,
# it's usually not necessary.
res <- nearPoints(data(), input$plot_click, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
output$plot_brushedpoints <- renderTable({
res <- brushedPoints(data(), input$plot_brush, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
}
source("C:/Users/NSayresm/OneDrive - Environmental Protection Agency (EPA)/ESG/Shiny/Exercise/app.R", echo=TRUE)
d <- data()
plot(d$speed, d$dist)
#> `shiny::dataTableOutput()` is deprecated as of shiny 1.8.1.
#> Please use `DT::DTOutput()` instead.
#> See <https://rstudio.github.io/DT/shiny.html> for more information.
server <- function(input, output, session) {
output$table <- renderDataTable(mtcars, options = list(pageLength = 5))
}
source("C:/Users/NSayresm/OneDrive - Environmental Protection Agency (EPA)/ESG/Shiny/Exercise/app.R", echo=TRUE)
output$plot_brushedpoints <- renderTable({
res <- brushedPoints(data(), input$plot_brush, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
source("C:/Users/NSayresm/OneDrive - Environmental Protection Agency (EPA)/ESG/Shiny/Exercise/app.R", echo=TRUE)
?plot
runApp('Exercise')
?renderPlot
library(vroom)
dir.create("neiss")
#> Warning in dir.create("neiss"): 'neiss' already exists
download <- function(name) {
url <- "https://raw.github.com/hadley/mastering-shiny/main/neiss/"
download.file(paste0(url, name), paste0("neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
download("population.tsv")
download("products.tsv")
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
selected <- injuries %>% filter(prod_code == 649)
source("C:/Users/NSayresm/OneDrive - Environmental Protection Agency (EPA)/ESG/Shiny/Chapter4.R", echo=TRUE)
runApp('Exercise')
runApp('Exercise')
runApp('Exercise')
shiny::runApp('chapter5')
source('chapter5/background_shiny.R')
translateLocalUrl("http://127.0.0.1:3384", absolute = TRUE)
rstudioapi::translateLocalUrl("http://127.0.0.1:3384", absolute = TRUE)
rstudioapi::viewer("http://127.0.0.1:3384")
rstudioapi::viewer("http://127.0.0.1:3384")
runApp('chapter5')
rstudioapi::viewer("http://127.0.0.1:7200")
rstudioapi::viewer("http://127.0.0.1:7200")
runApp('chapter5')
runApp('chapter5')
runApp('chapter5')
runApp('chapter5')
runApp('chapter5')
library(glue)
runApp('chapter5')
install.packages("styler")
install.packages("lintr")
styler:::style_selection()
styler:::style_selection()
?`|>`
